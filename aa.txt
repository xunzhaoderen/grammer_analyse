Var program 40
Var block 41
Var statList 42
Var stat 43
Var decls 44
Var statement 45
Var type 46
Var init_decl_list 47
Var init_declarator 48
Var declarator 49
Var initializer 50
Var assignment_list 52
Var initializer_list 53
Var expression_statement 55
Var iteration_statement 57
Var statement_list 58
Var expression 59
Var assignment_expression 60
Var op 61
Var unary_expression 62
Var operand 63
Var unary_op 64
Var M2 65
Var M3 66
Ter int 0
Ter float 1
Ter id 9
Ter = 24
Ter num 7
Ter [ 18
Ter ] 19
Ter , 14
Ter { 20
Ter } 21
Ter return 5
Ter ; 15
Ter if 3
Ter ( 17
Ter ) 16
Ter else 4
Ter for 2
Ter ++ 28
Ter < 23
Ter >= 26
Ter + 10
Ter - 11
Ter * 12
Ter / 13
%%
program = block
block = { statList } 
statList = stat statList 
statList = stat 
stat = decls
stat = statement
decls = type init_decl_list ;
type = int
type = float
init_decl_list = init_declarator
init_decl_list = init_decl_list , init_declarator
init_declarator = declarator
init_declarator = declarator = initializer
declarator = id
declarator = id [ num ] 
declarator = id [ id ]
initializer = assignment_expression
initializer = { initializer_list }
initializer_list = initializer
initializer_list = initializer_list , initializer
statement = expression_statement
statement = if ( expression ) M2 statement else statement
statement = for ( expression ; expression ; expression ) statement
statement = return num
statement =  { statement_list }
expression_statement = ;
expression_statement = expression ;
statement_list = statement 
statement_list = statement statement_list
expression = assignment_expression
expression = id op num
expression = id ++
assignment_expression = unary_expression = assignment_expression
assignment_expression = unary_expression unary_op assignment_expression
assignment_expression = num
assignment_expression = declarator
unary_expression = declarator
unary_expression = num
op = <
op = >=
unary_op = + 
unary_op = -
unary_op = *
unary_op = /
M2 = my_null
M3 = my_null
#
//四则运算是否有二义性。
//输入的产生式以一个空格作为分割